---
import type { HTMLAttributes } from "astro/types";
import { tv, type VariantProps } from "tailwind-variants";
import Icon, { type LucideIconName } from "./icon.astro";

type Props = HTMLAttributes<"button"> &
  ButtonVariants & { icon?: LucideIconName };

export type ButtonVariants = VariantProps<typeof buttonVariants>;

export const buttonVariants = tv({
  base: [
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded focusable",
    "disabled:opacity-50 disabled:pointer-events-none motion-safe:transition-colors ",
    "aria-disabled:opacity-50 aria-disabled:pointer-events-none",
  ],
  defaultVariants: { variant: "solid", size: "md" },
  variants: {
    variant: {
      solid:
        "bg-primary text-primary-foreground border-none hover:bg-primary/90",
      soft: "bg-secondary text-secondary-foreground border-none hover:bg-secondary/80",
      "soft-outline":
        "bg-secondary text-secondary-foreground border border-border hover:bg-accent",
      outline:
        "bg-transparent text-foreground border border-border hover:bg-accent hover:text-accent-foreground",
      ghost:
        "bg-transparent text-foreground border-none hover:bg-accent hover:text-accent-foreground",
    },
    size: {
      sm: "h-8 px-4 text-xs",
      md: "h-10 px-6 text-sm",
      lg: "h-12 px-8 text-base",
      icon: "size-8",
    },
  },
});

const { class: className, type, variant, size, icon, ...props } = Astro.props;
---

<button
  {...props}
  type={type ?? "button"}
  class={buttonVariants({ variant, size, className })}
>
  <slot />
  {size === "icon" && icon && <Icon name={icon} />}
</button>
