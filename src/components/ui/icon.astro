---
import { Icon as Component } from "astro-icon/components";
import { type ComponentProps } from "astro/types";
import { tv, type VariantProps } from "tailwind-variants";

type Props = ComponentProps<typeof Component> & IconVariants;

export type IconVariants = VariantProps<typeof iconVariants>;

const iconVariants = tv({
  base: "shrink-0",
  variants: {
    size: {
      sm: "h-4 w-4",
      md: "h-5 w-5",
      lg: "h-6 w-6",
      xl: "h-8 w-8",
    },
    variant: {
      default: "",
      destructive: "text-destructive",
      secondary: "text-muted-foreground",
      ghost: "text-muted-foreground hover:text-foreground",
      link: "text-primary underline-offset-4 hover:underline",
    },
  },
  defaultVariants: {
    size: "md",
    variant: "default",
  },
});

function toKebabCase(str: string): string {
  return str
    .replace(/([a-z])([A-Z])/g, "$1-$2")
    .replace(/([A-Z])([A-Z][a-z])/g, "$1-$2")
    .toLowerCase();
}

function processIconName(name: string): string {
  if (name.includes(":")) {
    return name;
  }
  const kebabName = toKebabCase(name);
  return `lucide:${kebabName}`;
}

const { class: className, name, variant, size, ...props } = Astro.props;
const processedName = processIconName(name);
---

<Component
  {...props}
  aria-hidden
  shape-rendering="crispEdges"
  name={processedName}
  class={iconVariants({ variant, size, className })}
/>
