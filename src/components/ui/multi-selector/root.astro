---
import type { HTMLAttributes } from "astro/types";
import { twMerge } from "tailwind-merge";

export type Props = Omit<HTMLAttributes<"div">, "class"> & {
  options: string[];
  searchPlaceholder?: string;
  class?: string;
};

const {
  options,
  searchPlaceholder = "Search",
  class: className,
  ...props
} = Astro.props;
---

<div
  {...props}
  x-data={`{
    searchTerm: '',
    selectedItems: [],
    options: ${JSON.stringify(options)},
    get filteredOptions() {
      return this.options.filter(option => 
        option.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    },
    toggleOption(option) {
      const index = this.selectedItems.indexOf(option);
      if (index > -1) {
        this.selectedItems.splice(index, 1);
      } else {
        this.selectedItems.push(option);
      }
      this.$dispatch('selection-change', { value: [...this.selectedItems] });
    },
    selectAll() {
      this.selectedItems = [...this.options];
      this.$dispatch('selection-change', { value: [...this.selectedItems] });
    },
    selectNone() {
      this.selectedItems = [];
      this.$dispatch('selection-change', { value: [...this.selectedItems] });
    }
  }`}
  class={twMerge(
    "w-full max-w-sm rounded-lg border bg-card text-card-foreground shadow-sm",
    className,
  )}
>
  <!-- Search Input -->
  <div class="p-2 border-b">
    <input
      type="text"
      x-model="searchTerm"
      placeholder={searchPlaceholder}
      class="w-full text-sm bg-transparent placeholder:text-muted-foreground focus:outline-none"
    />
  </div>

  <!-- Options List -->
  <div class="max-h-48 overflow-y-auto">
    <template x-for="option in filteredOptions" :key="option">
      <label
        class="flex items-center gap-3 p-2 hover:bg-accent hover:text-accent-foreground cursor-pointer transition-colors"
      >
        <input
          type="checkbox"
          x-bind:checked="selectedItems.includes(option)"
          @change="toggleOption(option)"
          class="h-4 w-4 rounded border-border bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2"
        />
        <span class="text-sm font-medium" x-text="option"></span>
      </label>
    </template>
  </div>

  <!-- Actions -->
  <div class="border-t p-3">
    <div class="flex items-center gap-2 text-xs text-muted-foreground">
      <span>or</span>
      <button
        type="button"
        @click="selectAll()"
        class="text-primary hover:underline"
      >
        All
      </button>
      <span>/</span>
      <button
        type="button"
        @click="selectNone()"
        class="text-primary hover:underline"
      >
        None
      </button>
    </div>
  </div>
</div>
