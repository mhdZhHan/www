---
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { Image } from "astro:assets";
import { getSortedPosts, type GetSortedPosts } from "@/content/utils";

import Layout from "@/layouts/v2.astro";
import Button from "@/components/ui/button.astro";
import Callout from "@/components/ui/callout.astro";
import Date from "@/components/ui/date.astro";
import Icon from "@/components/ui/icon.astro";
import LinkHeader from "@/components/ui/link-header.astro";
import Link from "@/components/ui/link.astro";
import Section from "@/components/ui/section.astro";
import Separator from "@/components/ui/separator.astro";
import Text from "@/components/ui/text.astro";
import * as Code from "@/components/ui/code";
import * as List from "@/components/ui/list";
import * as Popover from "@/components/ui/popover";

import PostViews from "./_components/post-views.astro";
import PostGithub from "./_components/post-github.astro";
import PostCard from "./_components/post-card.astro";

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async () =>
  (await getSortedPosts()).map((post, index, posts) => {
    const prevPost = (posts[index + 1] ?? posts[0]) as GetSortedPosts[0];
    const nextPost = (posts[index - 1] ??
      posts[posts.length - 1]) as GetSortedPosts[0];
    return {
      params: { id: post.id },
      props: { ...post, morePosts: [prevPost, nextPost] },
    };
  })) satisfies GetStaticPaths;

const { id: postId, data, headings, Content, morePosts } = Astro.props;
---

<Layout
  title={data.title}
  description={data.description}
  og={`blog/${postId}.png`}
>
  <article data-pagefind-body data-pagefind-meta={`slug:/blog/${postId}`}>
    <Section data-pagefind-ignore as="div" class="max-w-4xl">
      <div class="rounded-border mb-10 overflow-hidden lg:h-64">
        <Image
          src={data.image}
          alt="Cover"
          loading="eager"
          layout="full-width"
          class="rounded not-dark:hidden"
        />
      </div>

      <div class="mb-2 flex items-center gap-2">
        <Date
          value={data.pubDate}
          size="2"
          variant="subtle"
          data-pagefind-meta="published, publishedISO[datetime]"
        />
        <Icon name="Dot" variant="subtle" />
        <Text size="2" variant="subtle" data-pagefind-meta="readingTime"
          >{data.readingTime}</Text
        >
        <Icon name="Dot" variant="subtle" />
        <PostViews server:defer id={postId} size="2" variant="subtle" />
      </div>

      <Text
        as="h1"
        size="9"
        font="serif"
        weight="bold"
        class="text-balance uppercase">{data.title}</Text
      >
    </Section>

    <Section as="div" class="max-w-4xl">
      <div
        class:list={[
          "counter-root mx-auto flex w-full max-w-prose flex-col gap-10 text-sm/8 text-current/80",
          "[&_:where(ol,ul)]:list-inside [&_ol]:list-decimal [&_ul]:list-disc",
        ]}
      >
        <Content
          components={{
            h2: LinkHeader,
            a: Link,
            blockquote: Callout,
            figure: Code.Root,
            figcaption: Code.Header,
            pre: Code.Content,
            code: Code.Block,
          }}
        />

        {data.repo && <PostGithub repo={data.repo} />}
      </div>
    </Section>
  </article>

  <Section class="max-w-4xl">
    <Text as="h2" font="serif" size="5" weight="bold">CONTINUE READING</Text>
    <Text size="2" variant="subtle"
      >Check out some other software-related blog posts I've written.</Text
    >

    <List.Root class="grid gap-6 md:grid-cols-2 my-10">
      {
        morePosts.map((post) => (
          <List.Item>
            <PostCard {...post} />
          </List.Item>
        ))
      }
    </List.Root>
  </Section>

  <Popover.Root class="fixed right-12 bottom-8 not-2xl:hidden">
    <Button
      slot="popover-trigger"
      variant="soft-outline"
      size="sm"
      popovertarget="table-of-contents"
      class="w-auto"
    >
      <Icon name="TableOfContents" />
      <Text size="2">Index</Text>
      <Icon name="ChevronsUpDown" />
      <Separator
        orientation="vertical"
        class="mx-2 not-supports-[scroll-timeline:none]:hidden"
      />
      <Text
        size="1"
        class="scroll-progress-item text-gray-12 w-[4ch] not-supports-[scroll-timeline:none]:hidden"
      />
    </Button>

    <Popover.Content id="table-of-contents" class="fixed right-12 bottom-20">
      <List.Root class="counter-root">
        {
          headings.map((heading) => (
            <List.ItemLink
              href={`#${heading.slug}`}
              size="2"
              class="counter-item before:text-2xs p-1"
              x-on:click="$dispatch('close')"
            >
              {heading.text}
            </List.ItemLink>
          ))
        }
      </List.Root>
    </Popover.Content>
  </Popover.Root>
</Layout>
